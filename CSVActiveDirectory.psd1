#
# Module manifest for module 'CSVActiveDirectory'
#
# Generated by: Jeremy Cooper
#
# Generated on: 11/12/2024
#

@{

# Script module or binary module file associated with this manifest.
RootModule = '.\CSVActiveDirectory.psm1'

# Version number of this module.
ModuleVersion = '1.3.0'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = '5c5b9100-148e-42cc-a784-f3ba2fa9ac5b'

# Author of this module
Author = 'Jeremy Cooper'

# Company or vendor of this module
CompanyName = 'None'

# Copyright statement for this module
Copyright = '2024'

# Description of the functionality provided by this module
Description = 'A PowerShell module that simulates Active Directory functionality using CSV files as a backend. Provides user management, password policies, configuration management, and progress indicators.'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '5.1'

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
FormatsToProcess = @("Data\Formats\ADUser.format.ps1xml")

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @("Get-ADUser", "New-ADUser", "Remove-ADUser", "Enable-ADAccount", "Disable-ADAccount", "Search-ADAccount", "Get-ADConfig", "Set-ADConfig", "Test-ADConfig", "Set-ADAccountPassword", "Show-ADProgress", "Start-ADOperation", "Update-ADOperation", "Complete-ADOperation", "Show-ADBulkProgress", "Show-ADStatus", "Get-ADPasswordPolicy", "Test-ADPasswordComplexity", "ConvertTo-ADPasswordHash", "Test-ADPassword", "Get-Emoji", "Write-EmojiMessage", "Detect-UserIoCs")

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @()

        # A URL to the license for this module.
        # LicenseUri = ''

        # A URL to the main website for this project.
        # ProjectUri = ''

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        ReleaseNotes = @'
Version 1.3.0 - 2025-07-23

FIXED:
- Install Script Bug: Fixed -SkipSecurityTest parameter not working correctly in install.ps1
  - Added -SkipSecurityTest parameter to Create-Users.ps1 script
  - Implemented proper parameter splatting for reliable parameter passing between scripts
  - Fixed switch parameter handling to prevent security report from running when skipped

ADDED:
- PowerShell 5.1 & 7+ Compatibility: Comprehensive emoji support across PowerShell versions
  - Modern Unicode emoji method using [char]::ConvertFromUtf32()
  - Centralized Get-Emoji function for consistent display across versions
  - Automatic version detection and appropriate emoji method selection
  - ASCII fallbacks for PowerShell 5.1 compatibility
  - Updated all scripts to use centralized emoji function

ENHANCED:
- Get-IOCs HTML Report: Major interactive enhancements
  - Clickable IoC items to reveal detailed breakdowns
  - Collapsible IoC category cards with smooth animations
  - Detailed log breakdowns showing why each indicator is flagged
  - Enhanced JavaScript with proper event handling
  - Improved CSS grid layout for better user experience
  - Confidence level fix (capped at 100%)
  - Default collapsed state with quick summaries

TECHNICAL IMPROVEMENTS:
- Emoji Compatibility: All scripts updated for consistent display
  - Updated: install.ps1, Get-IOCs.ps1, Get-SecurityReport.ps1, Create-Users.ps1, Queries.ps1, Show-ADStatus.ps1
  - Replaced hardcoded Unicode emojis with function calls
  - Added bullet point support with ASCII alternatives
- Parameter Passing: Improved reliability of switch parameter passing between scripts
- Error Handling: Enhanced compatibility with PowerShell 5.1 syntax
- Performance: Fixed Measure-Object property errors in PowerShell 5.1

NEW SCRIPTS:
- Cleanup-Backups.ps1: Comprehensive backup management script
  - Age-based deletion with -DeleteAfterDays parameter
  - Delete all backups with -DeleteAll parameter
  - Safety features: dry run mode, confirmation prompts, WhatIf support
  - Detailed reporting with file age, size, and disk space freed
  - PowerShell 5.1 and 7+ compatibility

DOCUMENTATION:
- Updated installation guide with -SkipSecurityTest parameter usage
- Enhanced examples showing emoji compatibility
- Comprehensive Cleanup-Backups script guide
- Improved user feedback for skipped operations
'@

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

